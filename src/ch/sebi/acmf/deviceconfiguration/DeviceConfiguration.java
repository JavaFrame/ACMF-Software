package ch.sebi.acmf.deviceconfiguration;

import ch.sebi.acmf.utils.SettingsManager;
import javafx.beans.property.*;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.util.StringConverter;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;
import java.io.File;
import java.io.IOException;
import java.io.Serializable;

/**
 * Created by Sebastian on 25.05.2017.
 */
@XmlRootElement
public class DeviceConfiguration implements Serializable{
    private StringProperty name = new SimpleStringProperty();

    private ListProperty<TValue> tValuesList = new SimpleListProperty(FXCollections.observableArrayList());

    private JAXBContext context;

    private DeviceConfiguration() {

    }

    public DeviceConfiguration(String name) {
        setName(name);
    }

    private DeviceConfiguration(JAXBContext context, String name) {
        this.context = context;
        setName(name);
    }

    public void save() {
        try {
            Marshaller m = context.createMarshaller();
            m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
            File f = new File(SettingsManager.DEVICE_CONFIGURATIO_DIRECTORY.getAbsoluteFile() + "/" + getName() + ".dc");
            f.createNewFile();
            m.marshal(this, f);
        } catch (JAXBException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    @XmlElement
    public String getName() {
        return name.get();
    }
    public StringProperty nameProperty() {
        return name;
    }
    public void setName(String name) {
        this.name.set(name);
    }

    @Override
    public String toString() {
        return getName();
    }

    public DeviceConfiguration deepClone() {
        DeviceConfiguration dc = new DeviceConfiguration(getName());
        for(TValue tv : tValuesProperty()) {
            dc.tValuesProperty().add(tv);
        }
        return dc;
    }


    @XmlElement(name = "values")
    public ObservableList<TValue> getTValuesList() {
        return tValuesList.get();
    }

    public ListProperty<TValue> tValuesProperty() {
        return tValuesList;
    }

    public void setTValuesList(ObservableList<TValue> tValuesList) {
        this.tValuesList.set(tValuesList);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        DeviceConfiguration that = (DeviceConfiguration) o;

        //if (!getId().equals(that.getId())) return false; //generated by the IntelliJ IDEA
        if (getName() != null ? !getName().equals(that.getName()) : that.getName() != null) return false;
        return tValuesList != null ? tValuesList.equals(that.tValuesList) : that.tValuesList == null;
    }

    @Override
    public int hashCode() {
        int result = getName() != null ? getName().hashCode() : 0;
        result = 31 * result + (tValuesList != null ? tValuesList.hashCode() : 0);
        result = 31 * result + (context != null ? context.hashCode() : 0);
        return result;
    }

    public static class TValue {
       // private IntegerProperty id = new SimpleIntegerProperty(-1);
        private StringProperty name = new SimpleStringProperty();
        private IntegerProperty min = new SimpleIntegerProperty(0);
        private IntegerProperty max = new SimpleIntegerProperty(127);
        private IntegerProperty displayMin = new SimpleIntegerProperty(0);
        private IntegerProperty displayMax = new SimpleIntegerProperty(127);
        private IntegerProperty msg = new SimpleIntegerProperty(0);
        private IntegerProperty value1 = new SimpleIntegerProperty(-1);

        private ObservableList<TValueStringEnum> stringEnums = FXCollections.observableArrayList();

        private ObjectProperty<TValueType> type = new SimpleObjectProperty<>(TValueType.Int);

        private TValue() {
        }

        public TValue(String name, TValueType type) {
            setName(name);
            setType(type);
        }

       /* public TValue(String name, byte min, byte max) {
            setName(name);
            setType(TValueType.Int);
            setMin(min);
            setMax(max);
        }

        public TValue(String name, TValueStringEnum... stringEnums) {
            setName(name);
            setType(TValueType.Enum);
            getStringEnums().setAll(stringEnums);
        }*/

        @XmlElement
        public String getName() {
            return name.get();
        }
        public StringProperty nameProperty() {
            return name;
        }
        public void setName(String name) {
            this.name.set(name);
        }

        @XmlElement
        public byte getMin() {
            return (byte) min.get();
        }
        public IntegerProperty minProperty() {
            return min;
        }
        public void setMin(byte min) {
            this.min.set(min);
        }

        @XmlElement
        public byte getMax() {
            return (byte) max.get();
        }
        public IntegerProperty maxProperty() {
            return max;
        }
        public void setMax(byte max) {
            this.max.set(max);
        }

		public int getDisplayMin() {
			return displayMin.get();
		}
		public IntegerProperty displayMinProperty() {
			return displayMin;
		}
		public void setDisplayMin(int displayMin) {
			this.displayMin.set(displayMin);
		}

		public int getDisplayMax() {
			return displayMax.get();
		}
		public IntegerProperty displayMaxProperty() {
			return displayMax;
		}
		public void setDisplayMax(int displayMax) {
			this.displayMax.set(displayMax);
		}

		@XmlElement
        public byte getMsg() {
            return (byte) msg.get();
        }
        public IntegerProperty msgProperty() {
            return msg;
        }
        public void setMsg(byte msg) {
            this.msg.set(msg);
        }

        public int getValue1() {
            return value1.get();
        }
        public IntegerProperty value1Property() {
            return value1;
        }
        public void setValue1(int value1) {
            this.value1.set(value1);
        }

        @XmlElement
        public ObservableList<TValueStringEnum> getStringEnums() {
            return stringEnums;
        }
        public void setStringEnums(ObservableList<TValueStringEnum> stringEnums) {
            this.stringEnums = stringEnums;
        }

        @XmlElement
        public TValueType getType() {
            return type.get();
        }
        public ObjectProperty<TValueType> typeProperty() {
            return type;
        }
        public void setType(TValueType type) {
            this.type.set(type);
        }

        @Override
        public String toString() {
            return getName();
        }

        /*public TValue deepClone() {
            TValue tv = new TValue(getName(), getType());
            return tv;
        }*/

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            TValue tValue = (TValue) o;

            if (!getName().equals(tValue.getName())) return false;
            if (getMin() != tValue.getMin()) return false;
            if (getMax() != tValue.getMax()) return false;
            if (getMsg() != tValue.getMsg()) return false;
            if (!getStringEnums().equals(tValue.getStringEnums())) return false;
            return getType() == tValue.getType();
        }

        @Override
        public int hashCode() {
            int result = 0;
            result = 31 * result + (name != null ? name.hashCode() : 0);
            result = 31 * result + (min != null ? min.hashCode() : 0);
            result = 31 * result + (max != null ? max.hashCode() : 0);
            result = 31 * result + (stringEnums != null ? stringEnums.hashCode() : 0);
            result = 31 * result + (type != null ? type.hashCode() : 0);
            return result;
        }

        public static class TValueStringEnum {
            private StringProperty name = new SimpleStringProperty();
            //private IntegerProperty from = new SimpleIntegerProperty();
            //private IntegerProperty to = new SimpleIntegerProperty();
            private IntegerProperty value = new SimpleIntegerProperty();

            private TValue tValue;

            private TValueStringEnum() {}

            public TValueStringEnum(String name, byte value,  TValue tValue) {
                setName(name);
                setValue(value);
                setTValue(tValue);
            }

            @XmlElement
            public String getName() {
                return name.get();
            }
            public StringProperty nameProperty() {
                return name;
            }
            public void setName(String name) {
                this.name.set(name);
            }


            @XmlTransient
            public TValue getTValue() {
                return tValue;
            }

            public void setTValue(TValue tValue) {
                this.tValue = tValue;
            }

            public byte getValue() {
                return (byte) value.get();
            }
            public IntegerProperty valueProperty() {
                return value;
            }
            public void setValue(byte value) {
                this.value.set(value);
            }

            @Override
            public String toString() {
                return getName();
            }

            @Override
            public boolean equals(Object o) {
                if (this == o) return true;
                if (o == null || getClass() != o.getClass()) return false;

                TValueStringEnum that = (TValueStringEnum) o;

                if (!getName().equals(that.getName())) return false;
                if(getValue() != that.getValue()) return false;

                TValue tv1 = getTValue();
                TValue tv2 = that.getTValue();
                if(!tv1.getName().equals(tv2.getName())) return false;
                if(tv1.getMin() != tv2.getMin()) return false;
                if(tv1.getMax() != tv2.getMax()) return  false;
                if(tv1.getMsg() != tv2.getMsg()) return false;
                if(!tv1.getType().equals(tv2.getType())) return false;

                return true;
            }

            @Override
            public int hashCode() {
                int result = getName() != null ? getName().hashCode() : 0;
                result = 31 * result + getValue();
                result = 31 * result + (tValue != null ? tValue.hashCode() : 0);
                return result;
            }

            public static class TValueStringEnumConverter extends StringConverter<TValueStringEnum> {

                @Override
                public String toString(TValueStringEnum object) {
                    return object.getName() + " { value: " + object.getValue() +  "}";
                }

                @Override
                public TValueStringEnum fromString(String string) {
                    return new TValueStringEnum(string, (byte) 0, null);
                }
            }

            private void afterUnmarshal(Unmarshaller u, Object parent) {
                setTValue((TValue) parent);
            }
        }
    }


    public enum TValueType {
        Int,
        Enum
    }


    public static class DeviceConfigurationConverter extends StringConverter<DeviceConfiguration> {
        @Override
        public String toString(DeviceConfiguration object) {
            return object.getName();
        }

        @Override
        public DeviceConfiguration fromString(String string) {
            DeviceConfiguration dc = new DeviceConfiguration(string);
            dc.setName(string);
            return dc;
        }
    }
}
